# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import recipe_pb2 as recipe__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in recipe_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RecipeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddRecipe = channel.unary_unary(
                '/recipe.RecipeService/AddRecipe',
                request_serializer=recipe__pb2.AddRecipeRequest.SerializeToString,
                response_deserializer=recipe__pb2.AddRecipeResponse.FromString,
                _registered_method=True)
        self.ListRecipes = channel.unary_unary(
                '/recipe.RecipeService/ListRecipes',
                request_serializer=recipe__pb2.ListRecipesRequest.SerializeToString,
                response_deserializer=recipe__pb2.ListRecipesResponse.FromString,
                _registered_method=True)
        self.GetRecipe = channel.unary_unary(
                '/recipe.RecipeService/GetRecipe',
                request_serializer=recipe__pb2.GetRecipeRequest.SerializeToString,
                response_deserializer=recipe__pb2.GetRecipeResponse.FromString,
                _registered_method=True)
        self.GetSuggestedRecipes = channel.unary_unary(
                '/recipe.RecipeService/GetSuggestedRecipes',
                request_serializer=recipe__pb2.SuggestedRecipesRequest.SerializeToString,
                response_deserializer=recipe__pb2.ListRecipesResponse.FromString,
                _registered_method=True)
        self.ProcessRecipeRequest = channel.unary_unary(
                '/recipe.RecipeService/ProcessRecipeRequest',
                request_serializer=recipe__pb2.ProcessRecipeRequestMessage.SerializeToString,
                response_deserializer=recipe__pb2.ProcessRecipeResponse.FromString,
                _registered_method=True)


class RecipeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddRecipe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRecipes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRecipe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSuggestedRecipes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessRecipeRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecipeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddRecipe': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRecipe,
                    request_deserializer=recipe__pb2.AddRecipeRequest.FromString,
                    response_serializer=recipe__pb2.AddRecipeResponse.SerializeToString,
            ),
            'ListRecipes': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRecipes,
                    request_deserializer=recipe__pb2.ListRecipesRequest.FromString,
                    response_serializer=recipe__pb2.ListRecipesResponse.SerializeToString,
            ),
            'GetRecipe': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecipe,
                    request_deserializer=recipe__pb2.GetRecipeRequest.FromString,
                    response_serializer=recipe__pb2.GetRecipeResponse.SerializeToString,
            ),
            'GetSuggestedRecipes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSuggestedRecipes,
                    request_deserializer=recipe__pb2.SuggestedRecipesRequest.FromString,
                    response_serializer=recipe__pb2.ListRecipesResponse.SerializeToString,
            ),
            'ProcessRecipeRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessRecipeRequest,
                    request_deserializer=recipe__pb2.ProcessRecipeRequestMessage.FromString,
                    response_serializer=recipe__pb2.ProcessRecipeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'recipe.RecipeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('recipe.RecipeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RecipeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddRecipe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recipe.RecipeService/AddRecipe',
            recipe__pb2.AddRecipeRequest.SerializeToString,
            recipe__pb2.AddRecipeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListRecipes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recipe.RecipeService/ListRecipes',
            recipe__pb2.ListRecipesRequest.SerializeToString,
            recipe__pb2.ListRecipesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRecipe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recipe.RecipeService/GetRecipe',
            recipe__pb2.GetRecipeRequest.SerializeToString,
            recipe__pb2.GetRecipeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSuggestedRecipes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recipe.RecipeService/GetSuggestedRecipes',
            recipe__pb2.SuggestedRecipesRequest.SerializeToString,
            recipe__pb2.ListRecipesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessRecipeRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recipe.RecipeService/ProcessRecipeRequest',
            recipe__pb2.ProcessRecipeRequestMessage.SerializeToString,
            recipe__pb2.ProcessRecipeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
